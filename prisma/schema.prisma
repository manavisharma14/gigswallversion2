generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb" 
  url      = env("DATABASE_URL")
}

enum UserType {
  student
  other
}

// ðŸ’¡ OPTIONAL: Enforce consistent status values using enum
enum ApplicationStatus {
  pending
  accepted
  rejected
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  email       String   @unique
  password    String
  phone       String?
  college     String?
  department  String?
  gradYear    String?
  aim         String?
  skills      String?
  bio         String?
  role        String?
  type        UserType  @default(student)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  gigs         Gig[]         @relation("UserGigs")
  applications Application[]
}


model Application {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  userId     String             @db.ObjectId
  gigId      String             @db.ObjectId
  reason     String?
  experience String?
  portfolio  String?
  extra      String?
  status     ApplicationStatus  @default(pending) // use String if not using enum
  createdAt  DateTime           @default(now())

  user       User               @relation(fields: [userId], references: [id])
  gig        Gig                @relation(fields: [gigId], references: [id])
}



model Gig {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  budget       Int
  category     String
  college      String
  isOpen       Boolean        @default(true)
  status       String         @default("open")
  createdAt    DateTime       @default(now())
  postedById   String         @db.ObjectId
  postedBy     User           @relation(fields: [postedById], references: [id], name: "UserGigs")
  applications Application[]
  
  // This defines the reverse relation
  messages     Message[]      @relation("GigMessages")
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  gigId       String   @db.ObjectId
  message     String
  sender      String
  recipient   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  gig         Gig      @relation("GigMessages", fields: [gigId], references: [id])
}



